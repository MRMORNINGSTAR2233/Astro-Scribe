# Bio-Nexus Docker Compose Configuration
# Complete stack with PostgreSQL, Neo4j, Redis, and Next.js application

services:
  # PostgreSQL Database with pgvector for embeddings
  postgres:
    image: pgvector/pgvector:pg16
    container_name: bio-nexus-postgres
    environment:
      POSTGRES_DB: bionexus
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - bio-nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bionexus"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: bio-nexus-neo4j
    environment:
      NEO4J_AUTH: neo4j/neo4j_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
      NEO4J_server_memory_heap_initial__size: 512m
      NEO4J_server_memory_heap_max__size: 1G
      NEO4J_server_memory_pagecache_size: 512m
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - bio-nexus-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: bio-nexus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bio-nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Bio-Nexus Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bio-nexus-app
    env_file:
      - .env.docker
    environment:
      NODE_ENV: production
      PORT: 3000
      
      # Database connections
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/bionexus
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: neo4j_password
      REDIS_URL: redis://redis:6379
      
      # AI Service API Keys (from .env.local)
      GROQ_API_KEY: ${GROQ_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # Next.js Configuration
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-bio-nexus-secret-key-change-in-production}
      NEXTAUTH_URL: http://localhost:3000
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - bio-nexus-network
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Database initialization and setup service
  setup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bio-nexus-setup
    env_file:
      - .env.docker
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres_password@postgres:5432/bionexus
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: neo4j_password
      GROQ_API_KEY: ${GROQ_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    networks:
      - bio-nexus-network
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 30 &&
        echo 'Setting up databases...' &&
        pnpm setup:db &&
        echo 'Setup completed!'
      "
    restart: "no"

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: bio-nexus-postgres-data
  neo4j_data:
    driver: local
    name: bio-nexus-neo4j-data
  neo4j_logs:
    driver: local
    name: bio-nexus-neo4j-logs
  neo4j_import:
    driver: local
    name: bio-nexus-neo4j-import
  neo4j_plugins:
    driver: local
    name: bio-nexus-neo4j-plugins
  redis_data:
    driver: local
    name: bio-nexus-redis-data
  app_logs:
    driver: local
    name: bio-nexus-app-logs
  app_uploads:
    driver: local
    name: bio-nexus-app-uploads

# Custom network for service communication
networks:
  bio-nexus-network:
    driver: bridge
    name: bio-nexus-network